#include <stdio.h>

// Linear Search
int linearSearch(int arr[], int n, int key) {
    for(int i = 0; i < n; i++) {
        if(arr[i] == key) {
            return i; // return index
        }
    }
    return -1;
}

// Binary Search (array must be sorted)
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1, mid;
    while(low <= high) {
        mid = (low + high) / 2;
        if(arr[mid] == key)
            return mid;
        else if(arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int main() {
    int arr[50], n, key, choice, pos;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for(int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter element to search: ");
    scanf("%d", &key);

    printf("\nChoose Search Method:\n1. Linear Search\n2. Binary Search\n");
    scanf("%d", &choice);

    if(choice == 1) {
        pos = linearSearch(arr, n, key);
    } else {
        // Binary search requires sorted array
        // Let's sort the array using Bubble Sort
        for(int i = 0; i < n-1; i++) {
            for(int j = 0; j < n-i-1; j++) {
                if(arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        pos = binarySearch(arr, n, key);
    }

    if(pos != -1)
        printf("Element %d found at position %d (index %d)\n", key, pos+1, pos);
    else
        printf("Element %d not found in array\n", key);

    return 0;
}
